# Copyright 2023 Antmicro <www.antmicro.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from migen import *
from migen.fhdl.verilog import convert
from migen.fhdl.module import Module


class CRC16(Module):
    """16-bit CRC generator that can be used as a checksum generator for MIPI CSI-2
       long packets with 16-bit input data width.

    CRC generated by https://bues.ch/h/crcgen as verilog code and converted to Migen.
    CRC polynomial coefficients: x^16 + x^12 + x^5 + 1
                                 0x8408 (hex)
    CRC width:                   16 bits
    CRC shift direction:         right (little endian)
    Input word width:            16 bits

    Attributes
    ----------
    data_i : Signal(16)
        Input data to the CRC generator.
    crc_i : Signal(16)
        Input CRC to the CRC generator.
    crc_o : Signal(16)
        Calculated CRC.
    """
    def __init__(self):
        self.data_i = Signal(16)
        self.crc_i = Signal(16)
        self.crc_o = Signal(16)

        self.ios = {
            self.data_i,
            self.crc_i,
            self.crc_o,
        }

        self.comb += [
            self.crc_o[0].eq(self.crc_i[4] ^ self.crc_i[5] ^ self.crc_i[8] ^ self.crc_i[12] ^
                            self.data_i[4] ^ self.data_i[5] ^ self.data_i[8] ^ self.data_i[12]),
            self.crc_o[1].eq(self.crc_i[5] ^ self.crc_i[6] ^ self.crc_i[9] ^ self.crc_i[13] ^
                            self.data_i[5] ^ self.data_i[6] ^ self.data_i[9] ^ self.data_i[13]),
            self.crc_o[2].eq(self.crc_i[6] ^ self.crc_i[7] ^ self.crc_i[10] ^ self.crc_i[14] ^
                            self.data_i[6] ^ self.data_i[7] ^ self.data_i[10] ^ self.data_i[14]),
            self.crc_o[3].eq(self.crc_i[0] ^ self.crc_i[7] ^ self.crc_i[8] ^ self.crc_i[11] ^
                            self.crc_i[15] ^ self.data_i[0] ^ self.data_i[7] ^ self.data_i[8] ^
                            self.data_i[11] ^ self.data_i[15]),
            self.crc_o[4].eq(self.crc_i[0] ^ self.crc_i[1] ^ self.crc_i[4] ^ self.crc_i[5] ^
                            self.crc_i[9] ^ self.data_i[0] ^ self.data_i[1] ^ self.data_i[4] ^
                            self.data_i[5] ^ self.data_i[9]),
            self.crc_o[5].eq(self.crc_i[1] ^ self.crc_i[2] ^ self.crc_i[5] ^ self.crc_i[6] ^
                            self.crc_i[10] ^ self.data_i[1] ^ self.data_i[2] ^ self.data_i[5] ^
                            self.data_i[6] ^ self.data_i[10]),
            self.crc_o[6].eq(self.crc_i[0] ^ self.crc_i[2] ^ self.crc_i[3] ^ self.crc_i[6] ^
                            self.crc_i[7] ^ self.crc_i[11] ^ self.data_i[0] ^ self.data_i[2] ^
                            self.data_i[3] ^ self.data_i[6] ^ self.data_i[7] ^ self.data_i[11]),
            self.crc_o[7].eq(self.crc_i[0] ^ self.crc_i[1] ^ self.crc_i[3] ^ self.crc_i[4] ^
                            self.crc_i[7] ^ self.crc_i[8] ^ self.crc_i[12] ^ self.data_i[0] ^
                            self.data_i[1] ^ self.data_i[3] ^ self.data_i[4] ^ self.data_i[7] ^
                            self.data_i[8] ^ self.data_i[12]),
            self.crc_o[8].eq(self.crc_i[0] ^ self.crc_i[1] ^ self.crc_i[2] ^ self.crc_i[4] ^
                            self.crc_i[5] ^ self.crc_i[8] ^ self.crc_i[9] ^ self.crc_i[13] ^
                            self.data_i[0] ^ self.data_i[1] ^ self.data_i[2] ^ self.data_i[4] ^
                            self.data_i[5] ^ self.data_i[8] ^ self.data_i[9] ^ self.data_i[13]),
            self.crc_o[9].eq(self.crc_i[1] ^ self.crc_i[2] ^ self.crc_i[3] ^ self.crc_i[5] ^
                            self.crc_i[6] ^ self.crc_i[9] ^ self.crc_i[10] ^ self.crc_i[14] ^
                            self.data_i[1] ^ self.data_i[2] ^ self.data_i[3] ^ self.data_i[5] ^
                            self.data_i[6] ^ self.data_i[9] ^ self.data_i[10] ^ self.data_i[14]),
            self.crc_o[10].eq(self.crc_i[2] ^ self.crc_i[3] ^ self.crc_i[4] ^ self.crc_i[6] ^
                            self.crc_i[7] ^ self.crc_i[10] ^ self.crc_i[11] ^ self.crc_i[15] ^
                            self.data_i[2] ^ self.data_i[3] ^ self.data_i[4] ^ self.data_i[6] ^
                            self.data_i[7] ^ self.data_i[10] ^ self.data_i[11] ^ self.data_i[15]),
            self.crc_o[11].eq(self.crc_i[0] ^ self.crc_i[3] ^ self.crc_i[7] ^ self.crc_i[11] ^
                            self.data_i[0] ^ self.data_i[3] ^ self.data_i[7] ^ self.data_i[11]),
            self.crc_o[12].eq(self.crc_i[0] ^ self.crc_i[1] ^ self.crc_i[4] ^ self.crc_i[8] ^
                            self.crc_i[12] ^ self.data_i[0] ^ self.data_i[1] ^ self.data_i[4] ^
                            self.data_i[8] ^ self.data_i[12]),
            self.crc_o[13].eq(self.crc_i[1] ^ self.crc_i[2] ^ self.crc_i[5] ^ self.crc_i[9] ^
                            self.crc_i[13] ^ self.data_i[1] ^ self.data_i[2] ^ self.data_i[5] ^
                            self.data_i[9] ^ self.data_i[13]),
            self.crc_o[14].eq(self.crc_i[2] ^ self.crc_i[3] ^ self.crc_i[6] ^ self.crc_i[10] ^
                            self.crc_i[14] ^ self.data_i[2] ^ self.data_i[3] ^ self.data_i[6] ^
                            self.data_i[10] ^ self.data_i[14]),
            self.crc_o[15].eq(self.crc_i[3] ^ self.crc_i[4] ^ self.crc_i[7] ^ self.crc_i[11] ^
                            self.crc_i[15] ^ self.data_i[3] ^ self.data_i[4] ^ self.data_i[7] ^
                            self.data_i[11] ^ self.data_i[15]),
        ]


if __name__ == "__main__":
    crc = CRC16()
    print(convert(crc, crc.ios, name="crc16"))
